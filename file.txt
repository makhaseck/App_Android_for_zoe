//'ws://192.168.175.40:9090'
import React, {useEffect, useState} from 'react';
import {
  View,
  Text,
  TouchableHighlight,
  StyleSheet,
  Keyboard,
} from 'react-native';

import {ros} from './robot';

import ROSLIB from 'roslib';

const App = () => {
  
  const [status, setStatus] = useState('Disconnected');
  const [titlebutton, setTittlebutton] = useState('Connexion');

  // Connect to the rosbridge server
  const connection = () => {
    ros.connect();
    // Log a message when the connection is ok
    ros.on('connection', function () {
      console.log('Connected to websocket server.');
      setStatus('Connected');
      setTittlebutton('Deconnexion');
    });

    // Log a message when the connection is closed
    ros.on('close', function () {
      console.log('Connection to rosbridge closed.');
      setStatus('Disconnected');
      setTittlebutton('Connexion');
    });

    // Log a message when an error occurs
    ros.on('error', function (error) {
      console.log('Error connecting to rosbridge: ', error);
      setStatus('Disconnected');
      setTittlebutton('Connexion');
    });
  };

  const fibo = () => {
    var fibonacciClient = new ROSLIB.ActionClient({
      ros: ros,
      serverName: '/fibonacci',
      actionName: 'actionlib_tutorials/FibonacciAction',
    });

    var goal = new ROSLIB.Goal({
      actionClient: fibonacciClient,
      goalMessage: {
        order: 7,
      },
    });

    goal.on('feedback', function (feedback) {
      console.log('Feedback: ' + feedback.sequence);
    });

    goal.on('result', function (result) {
      console.log('Final Result: ' + result.sequence);
    });
    goal.send();
  };

  const GoLeft = () => {
    var cmdVel = new ROSLIB.Topic({
      ros: ros,
      name: '/turtle1/cmd_vel',
      messageType: 'geometry_msgs/Twist',
    });

    var twist = new ROSLIB.Message({
      linear: {
        x: 0.5,
        y: 0,
        z: 0,
      },
      angular: {
        x: 0,
        y: 0,
        z: 0.5,
      },
    });
    cmdVel.publish(twist);
  };

  const GoRight = () => {
    var cmdVel = new ROSLIB.Topic({
      ros: ros,
      name: '/turtle1/cmd_vel',
      messageType: 'geometry_msgs/Twist',
    });

    var twist = new ROSLIB.Message({
      linear: {
        x: 0.5,
        y: 0,
        z: 0,
      },
      angular: {
        x: 0,
        y: 0,
        z: -0.5,
      },
    });
    cmdVel.publish(twist);
  };

  const GoForward = () => {
    var cmdVel = new ROSLIB.Topic({
      ros: ros,
      name: '/turtle1/cmd_vel',
      messageType: 'geometry_msgs/Twist',
    });

    var twist = new ROSLIB.Message({
      linear: {
        x: 1,
        y: 0,
        z: 0,
      },
      angular: {
        x: 0,
        y: 0,
        z: 0,
      },
    });
    cmdVel.publish(twist);
  };

  const GoBack = () => {
    var cmdVel = new ROSLIB.Topic({
      ros: ros,
      name: '/turtle1/cmd_vel',
      messageType: 'geometry_msgs/Twist',
    });

    var twist = new ROSLIB.Message({
      linear: {
        x: -1,
        y: 0,
        z: 0,
      },
      angular: {
        x: 0,
        y: 0,
        z: 0,
      },
    });
    cmdVel.publish(twist);
  };

  const deconnection = () => {
    ros.close();
  };

  return (
  <>
      <View style={styles.ConnectButtons}>
        <Text>Status: {status}</Text>

        <TouchableHighlight
          onPress={titlebutton === 'Connexion' ? connection : deconnection}>
          <Text>{titlebutton}</Text>
        </TouchableHighlight>
      </View>
      <View style={styles.Container}>
        <TouchableHighlight
          onPress={GoForward}
          onLongPress={GoForward}
          style={styles.FBbuttons}>
          <Text>Forward</Text>
        </TouchableHighlight>

        <View style={styles.LRbuttons}>
          <TouchableHighlight onPress={GoLeft} style={styles.Lbutton}>
            <Text>Left</Text>
          </TouchableHighlight>

          <TouchableHighlight onPress={GoRight} style={styles.Rbutton}>
            <Text>Right</Text>
          </TouchableHighlight>
        </View>

        <TouchableHighlight onPress={GoBack} style={styles.FBbuttons}>
          <Text>Back</Text>
        </TouchableHighlight>
      </View>
  </>
  );
};

const styles = StyleSheet.create({
  Container: {
    flex: 1,
    justifyContent: 'space-around',
  },
  ConnectButtons:{
    flexDirection:'row',
    justifyContent: 'space-around',
  },
  FBbuttons:{
    alignItems:'center',
    backgroundColor:'blue',
    width:'20%',
    marginHorizontal:'40%'
  },
  LRbuttons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginHorizontal:'20%',
    width:'60%'
  },
  Lbutton:{
    backgroundColor:'blue',
    width:'30%',
    alignItems:'center'
  },
  Rbutton:{
    backgroundColor:'blue',
    width:'30%',
    alignItems:'center'
  },


});

export default App;
