//'ws://192.168.175.40:9090'
//'ws://192.168.148.40:9090'
//'ws://192.168.98.40:9090'

import React, {useEffect, useState} from 'react';
import {View, Text, TouchableOpacity, Switch, StyleSheet} from 'react-native';

import {ros} from './robot';

import ROSLIB from 'roslib';

import {
  accelerometer,
  setUpdateIntervalForType,
  SensorTypes,
} from 'react-native-sensors';

const App = () => {
  setUpdateIntervalForType(SensorTypes.accelerometer, 1000);

  const [status, setStatus] = useState('Disconnected');
  const [titlebutton, setTittlebutton] = useState('Connexion');
  const [turtlemode, setTurtlemode] = useState(false);

  const toggleSwitch = () => setTurtlemode(previousState => !previousState);


  // Connect to the rosbridge server
  const connection = () => {
    ros.connect();
    // Log a message when the connection is ok
    ros.on('connection', function () {
      console.log('Connected to websocket server.');
      setStatus('Connected');
      setTittlebutton('Deconnexion');
    });

    // Log a message when the connection is closed
    ros.on('close', function () {
      console.log('Connection to rosbridge closed.');
      setStatus('Disconnected');
      setTittlebutton('Connexion');
    });

    // Log a message when an error occurs
    ros.on('error', function (error) {
      console.log('Error connecting to rosbridge: ', error);
      setStatus('Erreur');
      setTittlebutton('Connexion');
    });
  };

  /**
   * Fonction pour faire aller le robot dans une direction.
   * @direction Premiere lettre du nom de la direction en anglais
   * @param {string} direction premier lettre de la direction en anglais exemple : Left => L.
   * @param {Float} xl lineaire x
   * @param {Float} yl lineaire y
   * @param {Float} zl lineaire z
   * @param {Float} xa angular x
   * @param {Float} ya angular y
   * @param {Float} za angular z
   */

  const Goto = (direction, xl, yl, zl, xa, ya, za) => {

    var cmdVelZoe = new ROSLIB.Topic({
      ros: ros,
      name: '/zoe/cmd_vel',
      messageType: 'geometry_msgs/Twist',
    });

    var cmdVelTurtle = new ROSLIB.Topic({
      ros: ros,
      name: '/turtle1/cmd_vel',
      messageType: 'geometry_msgs/Twist',
    });

    var twist = new ROSLIB.Message({
      linear: {
        x: xl,
        y: yl,
        z: zl,
      },
      angular: {
        x: xa,
        y: ya,
        z: za,
      },
    });

    if (turtlemode){
      cmdVelTurtle.publish(twist);
    }else{
      cmdVelZoe.publish(twist)
    }
    console.log(direction);
  };

  const onBPress = () => {
    if (turtlemode) {
      Goto('B', -1, 0, 0, 0, 0, 0);
    } else {
      Goto('B', 0.5, 0, 0, 0, 0, 0);
    }
  };

  const onFPress = () => {
    if (turtlemode) {
      Goto('F', 1, 0, 0, 0, 0, 0);
    } else {
      Goto('F', 20, 0, 0, 0, 0, 0);
    }
  };

  const onLPress = () => {
    if (turtlemode) {
      Goto('L', 0.5, 0, 0, 0, 0, 0.5);
    } else {
      Goto('L', 0.5, 0, 0, 0, 0, -20);
    }
  };

  const onRPress = () => {
    if (turtlemode) {
      Goto('R', 0.5, 0, 0, 0, 0, -0.5);
    } else {
      Goto('R', 0, 0, 0, 0, 0, 20);
    }
  };


  let timer;
  const onFPressIn = () => {
    timer = setInterval(() => {
      onFPress();
    }, 1000);
  };

  const onBPressIn = () => {
    timer = setInterval(() => {
      onBPress();
    }, 1000);
  };

  const onRPressIn = () => {
    timer = setInterval(() => {
      onRPress();
    }, 1000);
  };

  const onLPressIn = () => {
    timer = setInterval(() => {
      onLPress();
    }, 1000);
  };

  const onButtonPressOut = () => {
    clearInterval(timer);
  };

  const deconnection = () => {
    ros.close();
  };

  return (
    <>
      <View style={styles.ConnectButtons}>
        <Text>Status: {status}</Text>

        <Text>Zoe</Text>

        <Switch
          trackColor={{false: '#767577', true: '#81b0ff'}}
          thumbColor={turtlemode ? '#f5dd4b' : '#f4f3f4'}
          ios_backgroundColor="#3e3e3e"
          onValueChange={toggleSwitch}
          value={turtlemode}
          />
        <Text>Turtle</Text>



        <TouchableOpacity
          onPress={titlebutton === 'Connexion' ? connection : deconnection}>
          <Text>{titlebutton}</Text>
        </TouchableOpacity>
      </View>
      <View style={styles.Container}>
        <TouchableOpacity
          onPress={onFPress}
          onPressIn={onFPressIn}
          onPressOut={onButtonPressOut}
          style={styles.FBbuttons}>
          <Text>Forward</Text>
        </TouchableOpacity>

        <View style={styles.LRbuttons}>
          <TouchableOpacity
            onPress={onLPress}
            onPressIn={onLPressIn}
            onPressOut={onButtonPressOut}
            style={styles.Lbutton}>
            <Text>Left</Text>
          </TouchableOpacity>

          <TouchableOpacity
            onPress={onRPress}
            onPressIn={onRPressIn}
            onPressOut={onButtonPressOut}
            style={styles.Rbutton}>
            <Text>Right</Text>
          </TouchableOpacity>
        </View>

        <TouchableOpacity
          onPress={onBPress}
          onPressIn={onBPressIn}
          onPressOut={onButtonPressOut}
          style={styles.FBbuttons}>
          <Text>Back</Text>
        </TouchableOpacity>
      </View>
    </>
  );
};

const styles = StyleSheet.create({
  Container: {
    flex: 1,
    justifyContent: 'space-around',
  },
  ConnectButtons: {
    flexDirection: 'row',
    justifyContent: 'space-around',
  },
  FBbuttons: {
    alignItems: 'center',
    backgroundColor: 'blue',
    width: '20%',
    marginHorizontal: '40%',
  },
  LRbuttons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginHorizontal: '20%',
    width: '60%',
  },
  Lbutton: {
    backgroundColor: 'blue',
    width: '30%',
    alignItems: 'center',
  },
  Rbutton: {
    backgroundColor: 'blue',
    width: '30%',
    alignItems: 'center',
  },
});

export default App;
